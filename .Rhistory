}
return(matriz)
}
verifica = function(num){
num = eval(parse(text=num))
if(num == 0 ) return("")
return(round(1/num,3))
}
inverso = function(matriz){
dim = dim(matriz)[1]
for(i in 1:(dim-1)){
matriz[(i+1):dim,i] = mapply(function(x) verifica(x), matriz[i,(i+1):dim])
}
return(matriz)
}
m = reseta_matriz(3)
ui = fluidPage(
numericInput("dim", "Qual é a dimenção da matriz?",3),
actionButton("button", "Update"),
h4("Preencha a matriz: "),
matrixInput(inputId = "matrix",value = m),
h4("Matriz inversa:"),
rHandsontableOutput("table"),
actionButton("button2", "Codigo"),
verbatimTextOutput("texto")
)
server = function(input, output, session){
output$table <- renderRHandsontable({
matriz = input$matrix
rhandsontable(inverso(matriz))
})
observeEvent(input$button,{
nrow = input$dim
m = reseta_matriz(nrow)
updateMatrixInput(session, "matrix", m)
})
observeEvent(input$button2,{
output$texto = renderPrint({
codigo = paste0("matrix(c(",paste(inverso(input$matrix),collapse=", "),"),ncol = 3)")
codigo
})
})
}
runGadget(ui, server, viewer = viewer)
library(shiny)
library(shinyMatrix)
library(rhandsontable)
library(rlang)
reseta_matriz = function(dim){
matriz = diag(dim)
for(i in 1:(dim-1)){
matriz[(i+1):dim,i] = c("")
}
return(matriz)
}
verifica = function(num){
num = eval(parse(text=num))
if(num == 0 ) return("")
return(round(1/num,3))
}
inverso = function(matriz){
dim = dim(matriz)[1]
for(i in 1:(dim-1)){
matriz[(i+1):dim,i] = mapply(function(x) verifica(x), matriz[i,(i+1):dim])
}
return(matriz)
}
m = reseta_matriz(3)
ui = fluidPage(
numericInput("dim", "Qual é a dimenção da matriz?",3),
actionButton("button", "Update"),
h4("Preencha a matriz: "),
matrixInput(inputId = "matrix",value = m),
h4("Matriz inversa:"),
rHandsontableOutput("table"),
actionButton("button2", "Codigo"),
verbatimTextOutput("texto")
)
server = function(input, output, session){
output$table <- renderRHandsontable({
matriz = input$matrix
rhandsontable(inverso(matriz))
})
observeEvent(input$button,{
nrow = input$dim
m = reseta_matriz(nrow)
updateMatrixInput(session, "matrix", m)
})
observeEvent(input$button2,{
output$texto = renderPrint({
codigo = paste0("matrix(c(",paste(inverso(input$matrix),collapse=", "),"),ncol = 3)")
codigo
})
})
}
viewer <- paneViewer(300)
runGadget(ui, server, viewer = viewer)
runGadget(ui, server, server = server)
runGadget(ui, server)
library(shiny)
library(shinyMatrix)
library(rhandsontable)
library(rlang)
cria_matriz = function(){
reseta_matriz = function(dim){
matriz = diag(dim)
for(i in 1:(dim-1)){
matriz[(i+1):dim,i] = c("")
}
return(matriz)
}
verifica = function(num){
num = eval(parse(text=num))
if(num == 0 ) return("")
return(round(1/num,3))
}
inverso = function(matriz){
dim = dim(matriz)[1]
for(i in 1:(dim-1)){
matriz[(i+1):dim,i] = mapply(function(x) verifica(x), matriz[i,(i+1):dim])
}
return(matriz)
}
m = reseta_matriz(3)
ui = fluidPage(
numericInput("dim", "Qual é a dimenção da matriz?",3),
actionButton("button", "Update"),
h4("Preencha a matriz: "),
matrixInput(inputId = "matrix",value = m),
h4("Matriz inversa:"),
rHandsontableOutput("table"),
actionButton("button2", "Codigo"),
verbatimTextOutput("texto")
)
server = function(input, output, session){
output$table <- renderRHandsontable({
matriz = input$matrix
rhandsontable(inverso(matriz))
})
observeEvent(input$button,{
nrow = input$dim
m = reseta_matriz(nrow)
updateMatrixInput(session, "matrix", m)
})
observeEvent(input$button2,{
output$texto = renderPrint({
codigo = paste0("matrix(c(",paste(inverso(input$matrix),collapse=", "),"),ncol = 3)")
codigo
})
})
}
viewer <- paneViewer(300)
runGadget(ui = ui, server = server)
}
cria_matriz()
library(shiny)
library(shinyMatrix)
library(rhandsontable)
library(rlang)
cria_matriz = function(){
reseta_matriz = function(dim){
matriz = diag(dim)
for(i in 1:(dim-1)){
matriz[(i+1):dim,i] = c("")
}
return(matriz)
}
verifica = function(num){
num = eval(parse(text=num))
if(num == 0 ) return("")
return(round(1/num,3))
}
inverso = function(matriz){
dim = dim(matriz)[1]
for(i in 1:(dim-1)){
matriz[(i+1):dim,i] = mapply(function(x) verifica(x), matriz[i,(i+1):dim])
}
return(matriz)
}
m = reseta_matriz(3)
ui = fluidPage(
numericInput("dim", "Qual é a dimenção da matriz?",3),
actionButton("button", "Update"),
h4("Preencha a matriz: "),
matrixInput(inputId = "matrix",value = m),
h4("Matriz inversa:"),
rHandsontableOutput("table"),
actionButton("button2", "Codigo"),
verbatimTextOutput("texto")
)
server = function(input, output, session){
output$table <- renderRHandsontable({
matriz = input$matrix
rhandsontable(inverso(matriz))
})
observeEvent(input$button,{
nrow = input$dim
m = reseta_matriz(nrow)
updateMatrixInput(session, "matrix", m)
})
observeEvent(input$button2,{
output$texto = renderPrint({
codigo = paste0("matrix(c(",paste(inverso(input$matrix),collapse=", "),"),ncol = 3)")
codigo
})
})
}
viewer <- paneViewer(300)
runGadget(ui = ui, server = server, viewer = viewer)
}
cria_matriz()
library(shiny)
library(shinyMatrix)
library(rhandsontable)
library(rlang)
cria_matriz = function(){
reseta_matriz = function(dim){
matriz = diag(dim)
for(i in 1:(dim-1)){
matriz[(i+1):dim,i] = c("")
}
return(matriz)
}
verifica = function(num){
num = eval(parse(text=num))
if(num == 0 ) return("")
return(round(1/num,3))
}
inverso = function(matriz){
dim = dim(matriz)[1]
for(i in 1:(dim-1)){
matriz[(i+1):dim,i] = mapply(function(x) verifica(x), matriz[i,(i+1):dim])
}
return(matriz)
}
m = reseta_matriz(3)
ui = fluidPage(
numericInput("dim", "Qual é a dimenção da matriz?",3),
actionButton("button", "Update"),
h4("Preencha a matriz: "),
matrixInput(inputId = "matrix",value = m),
h4("Matriz inversa:"),
rHandsontableOutput("table"),
actionButton("button2", "Codigo"),
verbatimTextOutput("texto")
)
server = function(input, output, session){
output$table <- renderRHandsontable({
matriz = input$matrix
rhandsontable(inverso(matriz))
})
observeEvent(input$button,{
nrow = input$dim
m = reseta_matriz(nrow)
updateMatrixInput(session, "matrix", m)
})
observeEvent(input$button2,{
output$texto = renderPrint({
codigo = paste0("matrix(c(",paste(inverso(input$matrix),collapse=", "),"),ncol = 3)")
codigo
})
})
}
viewer <- paneViewer(300)
runGadget(ui, server, viewer = viewer)
}
cria_matriz()
getwd()
write.dcf("F:/GitHub/AHP2/inst/rstudio/addins.dcf")
write.dcf(file = "F:/GitHub/AHP2/inst/rstudio/addins.dcf")
write.dcf("oi",file = "F:/GitHub/AHP2/inst/rstudio/addins.dcf")
getwd()
devtools::load_all()
devtools::document()
devtools::install()
AHP:::cria_matriz()
AHP:::cria_matriz()
bookdown:::mathquill()
library(shiny)
library(shinyMatrix)
library(rhandsontable)
library(rlang)
install.packages("shinyBS")
library(shinyBS)
bookdown:::mathquill()
sys.source(runGadget(ui, server, viewer = viewer), new.env())
library(shiny)
library(shinyMatrix)
library(rhandsontable)
library(rlang)
cria_matriz = function(){
reseta_matriz = function(dim){
matriz = diag(dim)
for(i in 1:(dim-1)){
matriz[(i+1):dim,i] = c("")
}
return(matriz)
}
verifica = function(num){
num = eval(parse(text=num))
if(num == 0 ) return("")
return(round(1/num,3))
}
inverso = function(matriz){
dim = dim(matriz)[1]
for(i in 1:(dim-1)){
matriz[(i+1):dim,i] = mapply(function(x) verifica(x), matriz[i,(i+1):dim])
}
return(matriz)
}
m = reseta_matriz(3)
ui = fluidPage(
numericInput("dim", "Qual é a dimenção da matriz?",3),
actionButton("button", "Update"),
h4("Preencha a matriz: "),
matrixInput(inputId = "matrix",value = m),
h4("Matriz inversa:"),
rHandsontableOutput("table"),
actionButton("button2", "Codigo"),
verbatimTextOutput("texto")
)
server = function(input, output, session){
output$table <- renderRHandsontable({
matriz = input$matrix
rhandsontable(inverso(matriz))
})
observeEvent(input$button,{
nrow = input$dim
m = reseta_matriz(nrow)
updateMatrixInput(session, "matrix", m)
})
observeEvent(input$button2,{
output$texto = renderPrint({
codigo = paste0("matrix(c(",paste(inverso(input$matrix),collapse=", "),"),ncol = 3)")
codigo
})
})
}
viewer <- paneViewer(300)
runGadget(ui, server, viewer = viewer)
sys.source(runGadget(ui, server, viewer = viewer), new.env())
}
library(shiny)
library(shinyMatrix)
library(rhandsontable)
library(rlang)
reseta_matriz = function(dim){
matriz = diag(dim)
for(i in 1:(dim-1)){
matriz[(i+1):dim,i] = c("")
}
return(matriz)
}
verifica = function(num){
num = eval(parse(text=num))
if(num == 0 ) return("")
return(round(1/num,3))
}
inverso = function(matriz){
dim = dim(matriz)[1]
for(i in 1:(dim-1)){
matriz[(i+1):dim,i] = mapply(function(x) verifica(x), matriz[i,(i+1):dim])
}
return(matriz)
}
m = reseta_matriz(3)
ui = fluidPage(
numericInput("dim", "Qual é a dimenção da matriz?",3),
actionButton("button", "Update"),
h4("Preencha a matriz: "),
matrixInput(inputId = "matrix",value = m),
h4("Matriz inversa:"),
rHandsontableOutput("table"),
actionButton("button2", "Codigo"),
verbatimTextOutput("texto")
)
server = function(input, output, session){
output$table <- renderRHandsontable({
matriz = input$matrix
rhandsontable(inverso(matriz))
})
observeEvent(input$button,{
nrow = input$dim
m = reseta_matriz(nrow)
updateMatrixInput(session, "matrix", m)
})
observeEvent(input$button2,{
output$texto = renderPrint({
codigo = paste0("matrix(c(",paste(inverso(input$matrix),collapse=", "),"),ncol = 3)")
codigo
})
})
}
shinyApp(ui = ui, server = server)
sys.source(shinyApp(ui = ui, server = server), new.env())
sys.source(shinyApp(ui = ui, server = server), new.env())
questionr:::icut()
reprex:::reprex_addin()
library(shiny)
library(shinyMatrix)
library(rhandsontable)
library(rlang)
cria_matriz = function(){
reseta_matriz = function(dim){
matriz = diag(dim)
for(i in 1:(dim-1)){
matriz[(i+1):dim,i] = c("")
}
return(matriz)
}
verifica = function(num){
num = eval(parse(text=num))
if(num == 0 ) return("")
return(round(1/num,3))
}
inverso = function(matriz){
dim = dim(matriz)[1]
for(i in 1:(dim-1)){
matriz[(i+1):dim,i] = mapply(function(x) verifica(x), matriz[i,(i+1):dim])
}
return(matriz)
}
m = reseta_matriz(3)
ui = fluidPage(
numericInput("dim", "Qual é a dimenção da matriz?",3),
actionButton("button", "Update"),
h4("Preencha a matriz: "),
matrixInput(inputId = "matrix",value = m),
h4("Matriz inversa:"),
rHandsontableOutput("table"),
actionButton("button2", "Codigo"),
verbatimTextOutput("texto")
)
server = function(input, output, session){
output$table <- renderRHandsontable({
matriz = input$matrix
rhandsontable(inverso(matriz))
})
observeEvent(input$button,{
nrow = input$dim
m = reseta_matriz(nrow)
updateMatrixInput(session, "matrix", m)
})
observeEvent(input$button2,{
output$texto = renderPrint({
codigo = paste0("matrix(c(",paste(inverso(input$matrix),collapse=", "),"),ncol = 3)")
codigo
})
})
}
viewer = dialogViewer("icut", width = 800, height = 700)
runGadget(ui, server, viewer = viewer)
}
cria_matriz()
devtools::load_all()
devtools::document()
devtools::install()
AHP:::cria_matriz()
devtools::install()
install.packages("Shiny")
install.packages("shiny")
devtools::install()
library(shiny)
library(shinyMatrix)
install.packages("shinyMatrix")
install.packages("rhandsontable")
devtools::install()
usethis::use_package("shiny")
usethis::use_package("rhandsontable")
usethis::use_package("shinyMatrix")
devtools::document()
devtools::load_all()
load("I:/GitHub/AHP2/data/BD1.rda")
View(BD1)
devtools::load_all()
devtools::document()
devtools::document()
devtools::document()
AHP::cria_matriz()
AHP:::cria_matriz()
devtools::load_all()
AHP:::cria_matriz()
matrix(c(1, 0.25, 0.2, 4, 1, 0.167, 5, 6, 1),ncol = 3)
devtools::install()
AHP:::cria_matriz()
devtools::document()
devtools::load_all()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::load_all()
devtools::document()
devtools::install()
devtools::document()
devtools::load_all()
devtools::install()
devtools::load_all()
devtools::document()
install.packages("rlang")
devtools::load_all()
devtools::document()
devtools::install()
AHP:::cria_matriz()
devtools::document()
devtools::load_all()
AHP:::cria_matriz()
devtools::document()
devtools::load_all()
devtools::install()
AHP:::cria_matriz()
